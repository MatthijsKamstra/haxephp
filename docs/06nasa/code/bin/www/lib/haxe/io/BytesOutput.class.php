<?php

// Generated by Haxe 3.4.4
class haxe_io_BytesOutput extends haxe_io_Output {
	public function __construct() {
		if(!php_Boot::$skip_constructor) {
		$this->b = new haxe_io_BytesBuffer();
	}}
	public $b;
	public function writeByte($c) {
		$_this = $this->b;
		$_this1 = $_this->b;
		$_this->b = _hx_string_or_null($_this1) . _hx_string_or_null(chr($c));
	}
	public function writeBytes($buf, $pos, $len) {
		{
			$tmp = null;
			$tmp1 = null;
			if($pos >= 0) {
				$tmp1 = $len < 0;
			} else {
				$tmp1 = true;
			}
			if(!$tmp1) {
				$tmp = $pos + $len > $buf->length;
			} else {
				$tmp = true;
			}
			if($tmp) {
				throw new HException(haxe_io_Error::$OutsideBounds);
			}
			$_this = $this->b;
			$_this1 = $_this->b;
			$this1 = $buf->b;
			$x = new php__BytesData_Wrapper(substr($this1->s, $pos, $len));
			$this2 = $x;
			$_this->b = _hx_string_or_null($_this1) . _hx_string_or_null($this2->s);
		}
		return $len;
	}
	public function getBytes() {
		return $this->b->getBytes();
	}
	public function __call($m, $a) {
		if(isset($this->$m) && is_callable($this->$m))
			return call_user_func_array($this->$m, $a);
		else if(isset($this->__dynamics[$m]) && is_callable($this->__dynamics[$m]))
			return call_user_func_array($this->__dynamics[$m], $a);
		else if('toString' == $m)
			return $this->__toString();
		else
			throw new HException('Unable to call <'.$m.'>');
	}
	function __toString() { return 'haxe.io.BytesOutput'; }
}
