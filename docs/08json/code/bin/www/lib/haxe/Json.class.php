<?php

// Generated by Haxe 3.4.4
class haxe_Json {
	public function __construct(){}
	static function phpJsonDecode($json) {
		$GLOBALS['%s']->push("haxe.Json::phpJsonDecode");
		$__hx__spos = $GLOBALS['%s']->length;
		$val = json_decode($json);
		$tmp = null;
		if($val === null) {
			$tmp = json_last_error() != JSON_ERROR_NONE;
		} else {
			$tmp = false;
		}
		if($tmp) {
			throw new HException(json_last_error_msg());
		}
		{
			$tmp2 = haxe_Json::convertAfterDecode($val);
			$GLOBALS['%s']->pop();
			return $tmp2;
		}
		$GLOBALS['%s']->pop();
	}
	static function convertAfterDecode($val) {
		$GLOBALS['%s']->push("haxe.Json::convertAfterDecode");
		$__hx__spos = $GLOBALS['%s']->length;
		$arr = null;
		if(is_object($val)) {
			$arr1 = php_Lib::associativeArrayOfObject($val);
			$arr = array_map((property_exists("haxe_Json", "convertAfterDecode") ? haxe_Json::$convertAfterDecode: array("haxe_Json", "convertAfterDecode")), $arr1);
			{
				$tmp = _hx_anonymous($arr);
				$GLOBALS['%s']->pop();
				return $tmp;
			}
		} else {
			if(is_array($val)) {
				$arr = array_map((property_exists("haxe_Json", "convertAfterDecode") ? haxe_Json::$convertAfterDecode: array("haxe_Json", "convertAfterDecode")), $val);
				{
					$tmp = new _hx_array($arr);
					$GLOBALS['%s']->pop();
					return $tmp;
				}
			} else {
				$GLOBALS['%s']->pop();
				return $val;
			}
		}
		$GLOBALS['%s']->pop();
	}
	function __toString() { return 'haxe.Json'; }
}
