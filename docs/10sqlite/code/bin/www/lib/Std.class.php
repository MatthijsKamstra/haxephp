<?php

// Generated by Haxe 3.4.4
class Std {
	public function __construct(){}
	static function is($v, $t) {
		$GLOBALS['%s']->push("Std::is");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$tmp = _hx_instanceof($v, $t);
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	static function string($s) {
		$GLOBALS['%s']->push("Std::string");
		$__hx__spos = $GLOBALS['%s']->length;
		{
			$tmp = _hx_string_rec($s, "");
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	static function parseInt($x) {
		$GLOBALS['%s']->push("Std::parseInt");
		$__hx__spos = $GLOBALS['%s']->length;
		$x = ltrim($x);
		$firstCharIndex = null;
		if(_hx_char_at($x, 0) === "-") {
			$firstCharIndex = 1;
		} else {
			$firstCharIndex = 0;
		}
		$firstCharCode = _hx_char_code_at($x, $firstCharIndex);
		$tmp = null;
		$tmp1 = null;
		if($firstCharCode !== null) {
			$tmp1 = $firstCharCode >= 48;
		} else {
			$tmp1 = false;
		}
		if($tmp1) {
			$tmp = $firstCharCode <= 57;
		} else {
			$tmp = false;
		}
		if(!$tmp) {
			$GLOBALS['%s']->pop();
			return null;
		}
		$secondChar = _hx_char_at($x, $firstCharIndex + 1);
		$tmp2 = null;
		if($secondChar !== "x") {
			$tmp2 = $secondChar === "X";
		} else {
			$tmp2 = true;
		}
		if($tmp2) {
			$tmp3 = intval($x, 0);
			$GLOBALS['%s']->pop();
			return $tmp3;
		} else {
			$tmp3 = intval($x, 10);
			$GLOBALS['%s']->pop();
			return $tmp3;
		}
		$GLOBALS['%s']->pop();
	}
	static function parseFloat($x) {
		$GLOBALS['%s']->push("Std::parseFloat");
		$__hx__spos = $GLOBALS['%s']->length;
		$result = floatval($x);
		if($result != 0) {
			$GLOBALS['%s']->pop();
			return $result;
		}
		$x = ltrim($x);
		$firstCharIndex = null;
		if(_hx_char_at($x, 0) === "-") {
			$firstCharIndex = 1;
		} else {
			$firstCharIndex = 0;
		}
		$charCode = _hx_char_code_at($x, $firstCharIndex);
		if($charCode === 46) {
			$charCode = _hx_char_code_at($x, $firstCharIndex + 1);
		}
		$tmp = null;
		$tmp1 = null;
		if($charCode !== null) {
			$tmp1 = $charCode >= 48;
		} else {
			$tmp1 = false;
		}
		if($tmp1) {
			$tmp = $charCode <= 57;
		} else {
			$tmp = false;
		}
		if($tmp) {
			$GLOBALS['%s']->pop();
			return 0.0;
		} else {
			$tmp2 = Math::$NaN;
			$GLOBALS['%s']->pop();
			return $tmp2;
		}
		$GLOBALS['%s']->pop();
	}
	static function random($x) {
		$GLOBALS['%s']->push("Std::random");
		$__hx__spos = $GLOBALS['%s']->length;
		if($x <= 0) {
			$GLOBALS['%s']->pop();
			return 0;
		} else {
			$tmp = mt_rand(0, $x - 1);
			$GLOBALS['%s']->pop();
			return $tmp;
		}
		$GLOBALS['%s']->pop();
	}
	function __toString() { return 'Std'; }
}
