<?php
/**
 * Generated by Haxe 4.3.2
 */

namespace php\_Boot;

use \php\Boot;

/**
 * `String` implementation
 */
class HxString {
	/**
	 * @param string $str
	 * @param int $index
	 * 
	 * @return string
	 */
	public static function charAt ($str, $index) {
		#/usr/local/lib/haxe/std/php/Boot.hx:757: characters 10-58
		if ($index < 0) {
			#/usr/local/lib/haxe/std/php/Boot.hx:757: characters 22-24
			return "";
		} else {
			#/usr/local/lib/haxe/std/php/Boot.hx:757: characters 27-58
			return \mb_substr($str, $index, 1);
		}
	}

	/**
	 * @param string $str
	 * @param int $index
	 * 
	 * @return int
	 */
	public static function charCodeAt ($str, $index) {
		#/usr/local/lib/haxe/std/php/Boot.hx:761: lines 761-763
		if (($index < 0) || ($str === "")) {
			#/usr/local/lib/haxe/std/php/Boot.hx:762: characters 4-15
			return null;
		}
		#/usr/local/lib/haxe/std/php/Boot.hx:764: lines 764-766
		if ($index === 0) {
			#/usr/local/lib/haxe/std/php/Boot.hx:765: characters 11-30
			$code = \ord($str[0]);
			if ($code < 192) {
				return $code;
			} else if ($code < 224) {
				return (($code - 192) << 6) + \ord($str[1]) - 128;
			} else if ($code < 240) {
				return (($code - 224) << 12) + ((\ord($str[1]) - 128) << 6) + \ord($str[2]) - 128;
			} else {
				return (($code - 240) << 18) + ((\ord($str[1]) - 128) << 12) + ((\ord($str[2]) - 128) << 6) + \ord($str[3]) - 128;
			}
		}
		#/usr/local/lib/haxe/std/php/Boot.hx:767: characters 3-46
		$char = \mb_substr($str, $index, 1);
		#/usr/local/lib/haxe/std/php/Boot.hx:768: characters 10-50
		if ($char === "") {
			#/usr/local/lib/haxe/std/php/Boot.hx:768: characters 23-27
			return null;
		} else {
			#/usr/local/lib/haxe/std/php/Boot.hx:768: characters 30-50
			$code = \ord($char[0]);
			if ($code < 192) {
				return $code;
			} else if ($code < 224) {
				return (($code - 192) << 6) + \ord($char[1]) - 128;
			} else if ($code < 240) {
				return (($code - 224) << 12) + ((\ord($char[1]) - 128) << 6) + \ord($char[2]) - 128;
			} else {
				return (($code - 240) << 18) + ((\ord($char[1]) - 128) << 12) + ((\ord($char[2]) - 128) << 6) + \ord($char[3]) - 128;
			}
		}
	}

	/**
	 * @param int $code
	 * 
	 * @return string
	 */
	public static function fromCharCode ($code) {
		#/usr/local/lib/haxe/std/php/Boot.hx:863: characters 3-29
		return \mb_chr($code);
	}

	/**
	 * @param string $str
	 * @param string $search
	 * @param int $startIndex
	 * 
	 * @return int
	 */
	public static function indexOf ($str, $search, $startIndex = null) {
		#/usr/local/lib/haxe/std/php/Boot.hx:772: lines 772-785
		if ($startIndex === null) {
			#/usr/local/lib/haxe/std/php/Boot.hx:773: characters 4-18
			$startIndex = 0;
		} else {
			#/usr/local/lib/haxe/std/php/Boot.hx:775: characters 4-28
			$length = mb_strlen($str);
			#/usr/local/lib/haxe/std/php/Boot.hx:776: lines 776-781
			if ($startIndex < 0) {
				#/usr/local/lib/haxe/std/php/Boot.hx:777: characters 5-25
				$startIndex += $length;
				#/usr/local/lib/haxe/std/php/Boot.hx:778: lines 778-780
				if ($startIndex < 0) {
					#/usr/local/lib/haxe/std/php/Boot.hx:779: characters 6-20
					$startIndex = 0;
				}
			}
			#/usr/local/lib/haxe/std/php/Boot.hx:782: lines 782-784
			if (($startIndex >= $length) && ($search !== "")) {
				#/usr/local/lib/haxe/std/php/Boot.hx:783: characters 5-14
				return -1;
			}
		}
		#/usr/local/lib/haxe/std/php/Boot.hx:786: lines 786-791
		$index = null;
		if ($search === "") {
			#/usr/local/lib/haxe/std/php/Boot.hx:787: characters 4-28
			$length = mb_strlen($str);
			#/usr/local/lib/haxe/std/php/Boot.hx:786: lines 786-791
			$index = ($startIndex > $length ? $length : $startIndex);
		} else {
			$index = \mb_strpos($str, $search, $startIndex);
		}
		#/usr/local/lib/haxe/std/php/Boot.hx:792: characters 10-39
		if ($index === false) {
			#/usr/local/lib/haxe/std/php/Boot.hx:792: characters 28-30
			return -1;
		} else {
			#/usr/local/lib/haxe/std/php/Boot.hx:792: characters 33-38
			return $index;
		}
	}

	/**
	 * @param string $str
	 * @param string $search
	 * @param int $startIndex
	 * 
	 * @return int
	 */
	public static function lastIndexOf ($str, $search, $startIndex = null) {
		#/usr/local/lib/haxe/std/php/Boot.hx:796: characters 3-26
		$start = $startIndex;
		#/usr/local/lib/haxe/std/php/Boot.hx:797: lines 797-809
		if ($start === null) {
			#/usr/local/lib/haxe/std/php/Boot.hx:798: characters 4-13
			$start = 0;
		} else {
			#/usr/local/lib/haxe/std/php/Boot.hx:800: characters 4-28
			$length = mb_strlen($str);
			#/usr/local/lib/haxe/std/php/Boot.hx:801: lines 801-808
			if ($start >= 0) {
				#/usr/local/lib/haxe/std/php/Boot.hx:802: characters 5-27
				$start -= $length;
				#/usr/local/lib/haxe/std/php/Boot.hx:803: lines 803-805
				if ($start > 0) {
					#/usr/local/lib/haxe/std/php/Boot.hx:804: characters 6-15
					$start = 0;
				}
			} else if ($start < -$length) {
				#/usr/local/lib/haxe/std/php/Boot.hx:807: characters 5-20
				$start = -$length;
			}
		}
		#/usr/local/lib/haxe/std/php/Boot.hx:810: lines 810-815
		$index = null;
		if ($search === "") {
			#/usr/local/lib/haxe/std/php/Boot.hx:811: characters 4-28
			$length = mb_strlen($str);
			#/usr/local/lib/haxe/std/php/Boot.hx:810: lines 810-815
			$index = (($startIndex === null) || ($startIndex > $length) ? $length : $startIndex);
		} else {
			$index = \mb_strrpos($str, $search, $start);
		}
		#/usr/local/lib/haxe/std/php/Boot.hx:816: lines 816-820
		if ($index === false) {
			#/usr/local/lib/haxe/std/php/Boot.hx:817: characters 4-13
			return -1;
		} else {
			#/usr/local/lib/haxe/std/php/Boot.hx:819: characters 4-16
			return $index;
		}
	}

	/**
	 * @param string $str
	 * @param string $delimiter
	 * 
	 * @return string[]|\Array_hx
	 */
	public static function split ($str, $delimiter) {
		#/usr/local/lib/haxe/std/php/Boot.hx:824: lines 824-829
		$arr = null;
		if ($delimiter === "") {
			$arr = \preg_split("//u", $str, -1, \PREG_SPLIT_NO_EMPTY);
		} else {
			#/usr/local/lib/haxe/std/php/Boot.hx:827: characters 4-49
			$delimiter = \preg_quote($delimiter, "/");
			#/usr/local/lib/haxe/std/php/Boot.hx:824: lines 824-829
			$arr = \preg_split("/" . ($delimiter??'null') . "/", $str);
		}
		#/usr/local/lib/haxe/std/php/Boot.hx:830: characters 3-41
		return \Array_hx::wrap($arr);
	}

	/**
	 * @param string $str
	 * @param int $pos
	 * @param int $len
	 * 
	 * @return string
	 */
	public static function substr ($str, $pos, $len = null) {
		#/usr/local/lib/haxe/std/php/Boot.hx:834: characters 3-41
		return \mb_substr($str, $pos, $len);
	}

	/**
	 * @param string $str
	 * @param int $startIndex
	 * @param int $endIndex
	 * 
	 * @return string
	 */
	public static function substring ($str, $startIndex, $endIndex = null) {
		#/usr/local/lib/haxe/std/php/Boot.hx:838: lines 838-843
		if ($endIndex === null) {
			#/usr/local/lib/haxe/std/php/Boot.hx:839: lines 839-841
			if ($startIndex < 0) {
				#/usr/local/lib/haxe/std/php/Boot.hx:840: characters 5-19
				$startIndex = 0;
			}
			#/usr/local/lib/haxe/std/php/Boot.hx:842: characters 4-44
			return \mb_substr($str, $startIndex);
		}
		#/usr/local/lib/haxe/std/php/Boot.hx:844: lines 844-846
		if ($endIndex < 0) {
			#/usr/local/lib/haxe/std/php/Boot.hx:845: characters 4-16
			$endIndex = 0;
		}
		#/usr/local/lib/haxe/std/php/Boot.hx:847: lines 847-849
		if ($startIndex < 0) {
			#/usr/local/lib/haxe/std/php/Boot.hx:848: characters 4-18
			$startIndex = 0;
		}
		#/usr/local/lib/haxe/std/php/Boot.hx:850: lines 850-854
		if ($startIndex > $endIndex) {
			#/usr/local/lib/haxe/std/php/Boot.hx:851: characters 4-23
			$tmp = $endIndex;
			#/usr/local/lib/haxe/std/php/Boot.hx:852: characters 4-25
			$endIndex = $startIndex;
			#/usr/local/lib/haxe/std/php/Boot.hx:853: characters 4-20
			$startIndex = $tmp;
		}
		#/usr/local/lib/haxe/std/php/Boot.hx:855: characters 3-66
		return \mb_substr($str, $startIndex, $endIndex - $startIndex);
	}

	/**
	 * @param string $str
	 * 
	 * @return string
	 */
	public static function toLowerCase ($str) {
		#/usr/local/lib/haxe/std/php/Boot.hx:753: characters 3-35
		return \mb_strtolower($str);
	}

	/**
	 * @param string $str
	 * 
	 * @return string
	 */
	public static function toString ($str) {
		#/usr/local/lib/haxe/std/php/Boot.hx:859: characters 3-13
		return $str;
	}

	/**
	 * @param string $str
	 * 
	 * @return string
	 */
	public static function toUpperCase ($str) {
		#/usr/local/lib/haxe/std/php/Boot.hx:749: characters 3-35
		return \mb_strtoupper($str);
	}
}

Boot::registerClass(HxString::class, 'php._Boot.HxString');
